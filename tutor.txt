#Linux
/ - Корень. Коренная директория linux.
/bin - Бинарники программ.
/proc - Виртуальная файловая система, генериться при запуске, находиться в оперативке. Можно вытащить данные метрик. | информация о работающей системе.
/boot - Лежат образы ядер. | Загрузочный раздел. /grub Файлы загрузчика.
/root - Директория супер пользователя. | Домашняя папка суперпользователя.
/dev - системные файлы, файлы устройств. | устройства.
/sbin - системные бинарники. | основные программы настройки системы.
/etc - лежат настройки.    /init.d Лежат службы. | Конфигурация нашей системы и ее компонентов.
/srv - Директория работы ядра. | Данные для системных служб.
/home - Директория пользаков. | Домашние папки.
/sys - Директория работы ядра
/lib - библиотеки ос и приложений | библиотеки модули ядра.
/tmp - времянка. При перезагрузке чиститься. | Временные файлы.
/media - точка монтирования. Например флеха или файловая система. | монтирование носителей.
/usr - пользовательские данные. | Все установленные пакеты программ, документация, исходный код ядра.
    /bin
    /include
    /lib
    /local
    /sbin
    /src - исходный код прог
/mnt - точка монтирования. Например флеха или файловая система. 
/var - для часто изменяющихся данных.
    /cache
    /lib
    /log -логи
    /mail
    /spool
    /tmp
/opt - для закрытого ПО. Хром например. | Папка для ПО от третьих поставщиков.

Tab дополнить название команды или файла.
Tab Tab покажет список доступных команд или файлов.

~: означает что мы в домашней директории пользака. сокращение нашей home директории.
cd .. на директорию выше.
cd в домашнюю.
. директория где мы сейчас.

* заменяет любое количество символов.
? заменяет один символ
[ ] диапазон
{ } некая последовательность которая может подставляться в качестве аргумента для выполнения команды.
! не
[ac] a или c
[a-c] -a,b,c 

history: вывод истории команд
clear очистить консоль
bash --version: версия bash. | bash - командная оболочка в linux. /etc/profile файл настройки баша.
exec ls -a  выполнение команды игнорируя настройки профиля. после чего выполняется в глобальной оболочке.
bash зайти обратно в нашу оболочку.
whoami: покажет имя текущего пользователя.
id - показать к каким группам принадлежит пользователь. id devops
who - показать кто сейчас в системе.
w - показать кто сейчас в системе и что делает.
last - показать последние логины.
hostname: имя компа
uname: система
uname -a: полная инфа о системе
cat /etc/os-release - посмотреть версию системы
cat /etc/issue -посмотреть версию системы можно для скриптов.
dpkg-reconfigure tzdata: смена времени графический интерфейс.
uptame: время с последнего включения.
w: кто залогинен в системе.
dmesg | grep virt посмотреть виртуала или железо
cat /proc/cpuinfo: инфа по процу.
lscpu тоже самое инфа по процу.
free -m: инфа по оперативке
free -h: инфа по оперативке в гигах
df -h размер диска
lsblk: размер блочных устройств
ip a: айпишник
pwd: где находимся
ls: посмотреть что находиться в данном каталоге
ls -a покажет со скрытыми 
ls -la: посмотреть в виде таблицы.
ls -lah просмотр таблицы  с удобным видом размера файлов
ls -lat: просмотр таблицы сортировка по времени
ls -laS: просмотр таблицы сотрировка по размеру 
ls [1-3].txt показать 1.txt 2.txt 3.txt
ll: сокращенный алиас ls-alF
ls --help справка по команде.
ln -s /home/devops/testdir testdir: создание линка. мягкая ссылка s- soft . Хороший тон указывать полный путь до файла.
ln test.txt testdublicat.txt: создает жесткую (hard) ссылку, (типа дубликат файла). При изменении одного из них изменения будут в обоих.
man: справка
man -k time покажет все команды где есть time
man uptime в справке можно нажать / и ввести искомое слово, подсветит.
locate uptime покажет где лежит uptime.
whereis -показывает где файл. более полная инфа.
which - покажет где лежит файл.
whatis -показывает что делает комманда. | Справка по названию.
type ls покажет с какими ключами запускается команда ls.
Ctrl+Z заснуть процесс например ping не прирвется. Вернуть обратно fg. 
file test.txt - определение типа файла.| Справка по файлу.
; символ разделение комманд. echo Hello; ls   типа с новой строчки, завершение предыдущей команды.  
_________________
env вывод переменных среды.
export задание переменной.
unset отключение переменной
__________________
systemctl --failed посмотреть не запущеные юниты(поломанные)
journalctl -f посмотреть события в лайве
journalctl -n 10 посмотреть последние 10 событий.
journalctl _UID=0    0- id юзера
______________
d____--__-_: Директория
-____--__-_: Файл
c____--__-_: Символьный файл, devnull черная дыра, генератор случайных чисел.
b____--__-_: Диски, разделы, дисководы
l____--__-_: Символические ссылки- Линки
p____--__-_: каналы
s____--__-_: сокеты
b____--__-_: блочное устройство

Ссылки жеские, мягкие ( soft и hard). мягкая как ярлык в винде. жеская ссылка ссылка на айноду. жесткую ссылку нельзя сделать на папку. и не могут работать если несколько файловых систем.

Айона-Индификатор файла, индексный дискриптор, данные о файле.
ls -i посмотреть номер  айноды.
df -hTi посмотреть количество айнод в системе. df -i
du -h просмотр сколько весят папки, подпапки в текущей директории.
du -h /home/devops просмотр сколько весят папки, подпапки в домашней папке.
du -h --summarize показать сколько весят папки БЕЗ подпапок.



___________________________
mkdir test1: создать директорию test1
mkdir test{2..10} создать директории 
mkdir test{1..11}/test{1..11} создать 11 директорий с 11 поддиректориями.
mkdir -m a=rwx test20 создание директории с правами чтения записи и выполнения.
mkdir -p /home/devops/testdir/pashla/akk создаст сразу все директории которых нет в пути.
_____________________________________
for i in {1..10}; do echo $i >> 1.txt; done    цикл 

head вывод первых 10 строчек файла
head -4 вывод 4 строчек файла
tail вывод последних 10 строчек файла
tail -3 вывод последних 3 строчек файла.
tail -f вывод в онлайн режиме.
echo вывод на экран.
touch test1.txt: создать файл, или обновить время.
touch {1,2,3}.txt создать 1.txt 2.txt 3.txt
touch {1..10}.log: создание 10 пустых файлов log.
ls [1-3].txt показать 1.txt 2.txt 3.txt
cat hello1.txt hello2.txt показать 2 файла подряд.
cat > chikchik.txt После ввода последней строки текста удерживайте клавишу Ctrl и одновременно с этим кратковременно нажмите клавишу d.
cat > hot.txt <<stop  После ввода последней строки текста пишем stop и файл закроется.
tac показ в обратном порядке.
test -прога для проверки файлов и сравнивания значений.
____
alias uptimich='uptime -p' задать свой псевдоним для команды. Меняем в файле /home/devops/.bashrc после создания надо заново зайти, либо использовать команду bash. Работает только под своим пользаком. Что бы сделать для всех надо менять другой файл.
Подробнее в $.txt
_______
команды не влияющие на файл, влияют только на вывод.
cut на выводе вырежет из файла. cut --help 
expand hello.txt при выводе hello.txt превратит  табы в пробелы.
unexpand -a hello2.txt привратит пробелы в табы.
fmt hello.txt если в файле текст был разделен на строчки то fmt покажет вывод в одну строчку.
fmt  -w 10 hello.txt покажет в одной строке не более 10 символов, остальное перенесет на следующую.
od hello1.txt конвертатор фаормата. переведет восьмиричный код, есть и другие форматы.
join log.txt log2.txt сложит значения с одинаковым например временем.
less просмотрщик
nl hello.txt нумерует строки.
paste 1.txt 2.txt обьединит построчно, почти как join только без единого поля.
pr hello.txt покажет как будет выглядить страница при печати на принтере.
sed -e 's/socks/people' 2.txt заменить слово socks на people. Мощный потоковый редактор.
tr Замена символов. echo Hello | tr -t A-Z a-z заменит на мелкие буквы. -d H уберет букву.
uniq 1.txt покажет уникальные строки. -с покажет количетсво повторений. -d покажет толоько дубли. -u не повторяищиеся.

________
rm test1.txt: удалить файл.
rm -r удалит все.
rmdir folder1 удаляет только пустую папку.
Как удалить файл с именем -rf? rm ./-rf
cp test1.txt /home/devops копирует файл.
cp -r folder1 folder2 копируем директорию 
cp -i  предотвращения перезаписи существующих файлов.
cp text2.txt "ANT ov"/txt.txt копирование файла с изменением имени в папку ANT ov    Если в названии папки пробел, название пишется в " "
mv test.txt /home/devops переименовывает или перемещает
mv folder1/1.txt .    перенос из папки folder1  в текущую папку.
mv -i   запрашивается подтверждение перезаписи существующего файла.
rename 's/\.txt/\.png/' *.txt у всех файлов с расширением .txt производится замена расширения на .png.
rename 's/file/document/' *.png замена всех (первых) вхождений слов "file" на "document" во всех файлах с расширением .png.
stat Посмотреть полную информацию по дискриптору файлу.
&& разделение команд.

base64 /dev/urandom | head -c 10000000 > test1.txt: создание файла белибирды размером 10МБ.
wall "Сообщение всем пользакам на серваке"  
nano 1.txt: создание файла с через текст редактор nano. ctrl+x сохранить. 
diff 1.txt 2.txt: сравнение 2 файлов.
find  /home/devops -name "file.txt": Выполнить поиск 
find / -name "hostname"
find . -size -5M поиск файла в текущей директории меньше 5 мегабайт.
find . -size +5M поиск файла в текущей директории больше 5 мегабайт.
find . -type d  поиск по типу а именно директория.
find . -atime +5 поиск файлов которым 5 дней.
find / -user bot искать везде все что относиться к пользователю bot.
find . -name "text.txt" | cpio -o > t.cpio найти файл и заархивировать его в формате cpio
cpio -id < t.cpio разархивировать 

locate mail поиск 

wc test.txt Выдает сколько строк, слов,символов.  * покажет сколько чего.
split -l 2 1.txt разбить файл на файлы по 2 строки. -b разбить по байтам на файлы.
sort test.txt Сортирует слова по алфавиту, без изменения файла. -r в обратном порядке.
sort -n test.txt Сотрирует цифры по увеличению.
cut -d ">" -f 3 filesdata.txt: вывод из файла разделителем.
| - пайп. Передача вывода следующей команде.
cut -d ">" -f 3 filesdata.txt | sort: возьмет вывод из файла разделителем и отсортирует его.
grep linux ./* искать слово linux во всех папках.
grep -i linux ./* искать слово linux во всех папках игноря с большой или маленькой буквы linux.
grep linux test.txt искать слово linux в файле test.txt
grep -n linux test.txt найти слова linux и пронумеровать строки где они есть.
_______________
РЕГУЛЯРНЫЕ ВЫРАЖЕНИЯ.
grep ^devop test.txt Найти в файле  test.txt строку которая начинается с devop.   ^ начало строки.
grep ops$ test.txt Найти в файле  test.txt строку которая заканчивается на ops.   $ конец строки.
grep .o test.txt найти сочетание любая буква после которой будет o                . любой символ
egrep '^(b|d)' test.txt найти с начала строки b или d                             | или
egrep '^[a-k]' test.txt найти с буквы a по k в файле.                             [] диапазон
egrep '^([a-k]|[A-K])' test.txt найти с буквы a по k или с A по К в файле.      
____
Grep понимает НЕКОТОРЫЕ регулярные выражения.
Egrep понимает ВСЕ регулярные выражения.
Fgrep НЕ ПОНИМАЕТ регулярные выражения.
______
Fgrep c$ test.txt  Найти c$ в файле test.txt    Если использовать grep то он искал бы "c" в конце строки. а fgrep не понимает знака $ как конец строки. поэтому ищет $ как обычный символ.
Rgrep ищет в не только в директории но и во вложенных папках.
sed -e 's/oo/aa' test.txt заменить вывод букв oo на aa в словах. Сам файл не меняется. Только вывод.
sed -e 's/oo/aa' test.txt > newtest.txt если нужно записать исправленный вывод в файл.
sed -re 's/^(B|b)/C/' test.txt заменить через регулярное выражение если строка начинается с  B|b на C
_____________________________________________________________________

tar cvfz pashla.tar.gz folder1  tar cvf "Имя будующего архива" "Что запаковываем"
tar xvf pashla.tar.gz разархивировать.
___________________________________________________________________________________
tar -cvzf file.tar.gz file.txt  создать архив file.tar.gz из файла file.txt
tar -tf file.tar.gz: посмотреть что в архиве.
tar -xvf file.tar.gz: распаковать архив.
__________________________
tar cf mytar.tar Folder1 - заархивировать Folder1
tar xf mytar.tar  - разархивировать архив
gzip /bzip2 /xz -скомпрессировать файл.
gunzip / bunzip2 /unxz -раскомпресировать файл.
tar cvzf myBZIP2.bz2 Folder1 -сжать Folder1
tar xvf myBZIP2.bz2 - распаковать архив.
myBZIP2.bz2 -посмотреть что внутри архива.
zip -r myZIP.zip Folder1 -запаковать Folder1 в zip
unzip myZIP.zip - Распаковать файл myZIP.zip

gzip drive.img заархивировать файл. оригинал затирается, на выходе только архив.
gunzip drive.img.gz разархивировать, архив пропадет, на выходе ориг файл.
bzip2 все тоже самое, сжимает мощно.
bunzip2
_____________________________________________________________
https://ru.wikipedia.org/wiki/Chmod статья по доступам.

chown devops test.txt  установка владельца    
chgrp robots test.txt установка группы владельцев 
chmod установка прав доступа

u - user  g - group o - others | w - write запись, r - read чтение, x - execute запуск.  + добавить, - отнять.
chmod ugo -x test.txt отнять право запуска у юзера, группы и остальных на файл test.txt   
chmod u+s test.sh запуск файла от имени владельца файла.    - отменить.
chmod g+s test.sh запуск файла от  группы  владельца файла.

chmod o+t testdir Стикибит.  - удалить.
______________
chown изменить владельца
chown :robots изменить группу
chown bot:robots изменить владельца и группу одновременно одной командой.
chown -R bot testdir изменение владельца папки и вложенных папок и файлов.

useradd -m vasya - создание юзера vasya с домашней директорией.
userdel -r vasya - удаление юзера vasya с домашней директорией.
/etc/skel - шаблон домашней директории.
passwd vasya - изменить пароль для юзера vasya
groupadd Programmers - создать группу Programers.
groupdel Programmers - удалить группу Programers.
usermod -aG Programers vasya - добавить юзера vasya в группу Programers.
deluser vasya Programers - удалить юзера vasya в группу Programers.
_________________________
apt утилита управления пакетным менеджером.
/etc/apt/sources.list перечень репозиториев.
apt-get --help справка
apt update: обновление репозиториев.
apt upgrade обновление установленных пакетов.
apt-cache --help справка.
apt-cache depends nginx посмотреть зависимости для nginx
 apt-cache rdepends nginx посмотреть кто зависит от nginx
apt-cache policy tomcat*: посмотреть какие версии приложения есть в репозитории.
apt install nginx установка nginx
apt remove nginx удаление nginx
apt autoremove удаление незадейственых зависимостей. (мусор после программ).
aptitude тоже самое только с графическим интерфейсом. по умолчанию нет, надо ставить. выбирать проги "+"уст. "g"
______________________________________
dpackage пакетный менеджер Дебиан лайк системах
dpkg -s nginx если установлен nginx покажет о статус. Сколько весит, какая архитектура, от чего зависит, что предоставляет.
dpkg -p nginx узнать инфу о пакете.
dpkg -S /bin/ls покажет в какой пакет входит ls.
dpkg -I nginx.deb покажет инфу о скаченой проге.
dpkg -i nginx установить.
dpkg reconfigure tzdata переконфигурирование любой службы, пакеты. например дата.
__________________________________________________
3 потока данных
std in (0)- поток ввода данных. 
std out (1)- поток вывода данных. например ответ на команду ls.
std error (2) - поток вывода ошибок. Когда прога не смогла сделать то что нужно. Например когда хотим удалить несуществующий файл.

Потоки можно перенаправлять. 
Tee отправить в файл и на стандартный вывод
Xargs построчно передать на ввод команде

< Взять из
Перенаправление хороших результатов в:
> - новый файл, перезаписать старый.
>> - добавить в новый файл или старый.
Перенаправление плохих результатов в:
2> -новый файл, перезаписать старый.
2>> -добавить в новый файл или старый.

&> -плохое и хорошее в файл.
/dev/null  -в никуда. черная дыра.

ls bob > result.txt 2> error.txt вывод в один файл, ошибки в другой.
ls | tee output.txt вывод и в файл и на экран.
find . -name "*.txt" | xargs rm -f финд найдет файлы txt списком, далее они удаляться.

_________________________________________
Процесс - Экземпляр проги который запущен в памяти.
Процессы:
- запущен - код выполняется
- спит - код не выполняется в ожидании кого либо события. нажатия клавиши, поступления данных из сети, и тд.
- зомби - сам процесс уже не существует, его код и данные выгруждены из оперативки но запись в таблице процессов по каким то причинам остается.
________________________
/var/log храняться логи
gmesg логи которые храняться только в оперативке.

Каждому процессу назначаются числовые индификаторы  pid от 1 до 65000 
ps -показать мои активные процессы
ps -aux: процессы которые есть в системе.
ps -aux | grep bash - найти все процессы bash.
Столб Stat
R- запущен
S - спит
T - остановлен
Z - зомби
< Высокий приоритет
N низкий приоритет
______________________________________
top - утилита монитор процессов.
В утилите top нажать 1, чтобы отобразить все ядра в системе.
В утилите top нажать c, чтобы отобразить команды, которыми были запущены процессы.
htop - утилита монитор процессов
F5 - режим просмотра рождительского процесса
______________________________________

& амперсант. sleep 1000 & запуск процесса в фоновом режиме.
jobs выполняющиеся задачи, процессы.
fg 1 фор граунд, и номер процесса из jobs. остановить процесс ctrl+z 
bg 1 бэк граунд и номер остановленного процесса из jobs. запустить остановленный процесс.

kill pid процесса. Убить процесс.
killall sleep убьет все процессы по названию.  если бить под рутом то убьет процесс и под другими пользаками.
nohup sleep 1000 Не завершать процесс при выходе из сессии.
pstree процессы в иеархическом виде.

Приоритеты процесса в линуксе от -20 до +19. Чем ниже число тем больше приоритет.  Стандартный приоритет 0.
Отрицацельные значения возможно делать только из под админа.
nice sleep 1000 запуск задачи с приоритетом 10. По умолчанию nice дает приоритет 10. 
renice 5 -p Указываем PID   Переназначение приоритета уже запущенному процессу. "5" указываем нужный приоритет от -20 до 19.
renice 15 -u devops измнение приоритета для всех процессов пользователя. 


______________________________
Сигналы в Linux - на WIki
__________________________
ss -tpln: открытые порты.
netstat -tupln открытые порты. 

0 0.0.0.0:22 - на всех интерфейсах прослушивается 22 порт.  
Статус LISTEN прослушка либо ожидание подключения.
Статус Closed соединение закрыто.
Статус Stabished соединение установлено.
Статус Timevei превышение времени ответа.

nmap: утилита сканирования портов. использовать с осторожностью.
nmap -sT 8.8.8.8 айпишние кого хотим просканировать
Дальше можно подключаться через telnet

lsof -i -U: список сокетов. есть unix есть ipv4 сетевые. в контейнеризации свять по unix так как быстрее.
______________________________________________
Ключи
На первой тачке:
ssh-keygen
Содержимое /root/.ssh(смотря под кем генерим) перекинуть на второую тачку в root/.ssh/autorized_keys. 
Другой вариант:
на второй тачке
В /etc/ssh/sshd_config 
PermitRootLogin YES - разрешить подключение по пользаком root.
ChallengeResponseAuthentication YES - разрешить подключение с помощью пароля.
service sshd restart - перезапускаем службу sshd
passwd root:  задаем пароль для рута
на первой тачке ssh-copy-id root@8.8.8.8
________________________
rsync -avz file1.txt 8.8.8.8:/tmp утилита передачи файлов.
______________________________________________
test.sh - шелл скрипт
#!/bin/bash Шебанг если на баше то bash если питон то python.
_____________________

#!/bin/bash
x=$(date)
y=`uptime -p`
echo "Сегодня $x и $y"






____________



